# -*- coding: utf-8 -*-
"""Raphael_clusters_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W2BHswnBjiBfikbhurwFsXXNntbPwBTC
"""

import pandas as pd  
import plotly.graph_objs as go
from sklearn import preprocessing 
import nltk
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from sklearn import datasets

class Data :

 l0=[]
 l1=[]
 l2=[]
 l3=[]
 l4=[]
 l5=[]
 l6=[]
 l7=[]

 def startEndData(self):
    
  file = open('/content/sample_data/AdmissionsCorePopulatedTable.txt','r')

  file.readline()

 

  for str in file:
    
     temp_list = file.readline().split()
     self.l0.append(temp_list[0])
     #l1.append(temp_list.split()[1])
     self.l2.append(temp_list[2])
     self.l3.append(temp_list[3])
     self.l4.append(temp_list[4])
     self.l5.append(temp_list[5])
    
  data={'Patient_ID':self.l0,'AS_Date':self.l2,'AS_time':self.l3,'AE_Date':self.l4,'AE_time':self.l5} 

  data = pd.DataFrame(data)
 
  #print(data)

  return(data)
 
 
 def diagnosisCorePopuTab(self) :
  file = open('/content/sample_data/AdmissionsDiagnosesCorePopulatedTable.txt','r')
  file.readline()
 

  for str in file:
    
   try:
    temp_list = file.readline().split()
    self.l0.append(temp_list[0])
    self.l1.append(temp_list[1])
    self.l2.append(temp_list[2])
    self.l3.append(" ".join(temp_list[3:]))
   except:
      print("Error occured",temp_list)
      continue
   print(temp_list)
 
  data={'Patient_ID':self.l0,'AD_ID':self.l1,'Dignoses_code':self.l2,'Description':self.l3} 

  data = pd.DataFrame(data)
   # print(data)
  return(data)

 def patientCorePopuTab(self) :
  file = open('/content/sample_data/PatientCorePopulatedTable.txt','r')
 
  file.readline()
 
  for str in file:
    
    temp_list = file.readline().split()
    
    self.l0.append(temp_list[0])
    self.l1.append(temp_list[1])
    self.l2.append(temp_list[2])
    self.l3.append(temp_list[3])
    self.l4.append(temp_list[4])
    self.l5.append(temp_list[5])
    self.l6.append(temp_list[6])
    self.l7.append(temp_list[7])
 
  data={'Patient_ID':self.l0,'P_gender':self.l1,'PDOB_Date':self.l2,'PDOB_Time':self.l3,'P_Race':self.l4,'P_MartialStatus':self.l5,'P_Lang':self.l6,'Poverty':self.l7} 

  data = pd.DataFrame(data)
  #print(data)
  return(data)

obj = Data()
data=obj.diagnosisCorePopuTab()

text_data  = data.loc[:,'Description']

vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(text_data)

true_k = 15
model = KMeans(n_clusters=true_k, init='k-means++', max_iter=100, n_init=1)
model.fit(X)

order_centroids = model.cluster_centers_.argsort()[:, ::-1]
terms = vectorizer.get_feature_names()

for i in range(true_k):
 print("CLUSTER") 
 print(i)
 for ind in order_centroids[i, :10]:
  print(terms[ind])

print('Prediction')
X = vectorizer.transform(['fever'])
predicted = model.predict(X)
print(predicted)