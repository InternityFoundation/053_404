# -*- coding: utf-8 -*-
"""month.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x5hV0Z_u3jDks8P0t--0G1zxhrbWOxc7
"""

import math
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import datetime
import pandas as pd
from datetime import datetime
from sklearn import preprocessing
from datetime import time
from mpl_toolkits.mplot3d import axes3d

class DataRead :

    
 temp_list=[]
 l0=[]
 l1=[]
 l2=[]
 l3=[]
 l4=[]
 l5=[]
 l6=[]
 l7=[]
 
 def reset(self):
  self.temp_list=[]
  self.l0=[]
  self.l1=[]
  self.l2=[]
  self.l3=[]
  self.l4=[]
  self.l5=[]
  self.l6=[]
  self.l7=[]

 def startEndData(self):
    
  file = open('/content/sample_data/AdmissionsCorePopulatedTable.txt','r')

  file.readline()

  self.reset()
  for str in file:
    
    try:
     self.temp_list = file.readline().split()
     print(self.temp_list)
     self.l0.append(self.temp_list[0])
     #l1.append(temp_list.split()[1])
     self.l2.append(self.temp_list[2])
     self.l3.append(self.temp_list[3])
     self.l4.append(self.temp_list[4])
     self.l5.append(self.temp_list[5])
    except Exception as e:
      print("Error :",e)
      continue
    
  data={'Patient_ID':self.l0,'AS_Date':self.l2,'AS_time':self.l3,'AE_Date':self.l4,'AE_time':self.l5} 

  data = pd.DataFrame(data)
 
  #print(data)

  return(data)
 
 
 def diagnosisCorePopuTab(self) :
  file = open('/content/sample_data/AdmissionsDiagnosesCorePopulatedTable.txt','r')
  file.readline()
 
  self.reset()  
  for str in file:
    
   try:   
    self.temp_list = file.readline().split()
    self.l0.append(self.temp_list[0])
    self.l1.append(self.temp_list[1])
    self.l2.append(self.temp_list[2])
    self.l3.append(" ".join(self.temp_list[3:]))
   except :
    print("Error :"+self.temp_list)   
  data={'Patient_ID':self.l0,'AD_ID':self.l1,'Dignoses_code':self.l2,'Description':self.l3} 

  data = pd.DataFrame(data)
      
   # print(data)
  return(data)

 def patientCorePopuTab(self) :
  file = open('/content/sample_data/PatientCorePopulatedTable.txt','r')
 
  file.readline()
 
  self.reset()  
  for str in file:
    
   try:   
    self.temp_list = file.readline().split()
    self.l0.append(self.temp_list[0])
    self.l1.append(self.temp_list[1])
    self.l2.append(self.temp_list[2])
    self.l3.append(self.temp_list[3])
    self.l4.append(self.temp_list[4])
    self.l5.append(self.temp_list[5])
    self.l6.append(self.temp_list[6])
    self.l7.append(self.temp_list[7])
   except:
      print("Error : "+self.temp_list)  
    
  data={'Patient_ID':self.l0,'P_gender':self.l1,'PDOB_Date':self.l2,'PDOB_Time':self.l3,'P_Race':self.l4,'P_MartialStatus':self.l5,'P_Lang':self.l6,'Poverty':self.l7} 

  data = pd.DataFrame(data)
  #print(data)
  return(data)

obj=DataRead()
df_admission = obj.startEndData()

df_admission

days=[]
end=[]
start=[]
los=[]

# time function

def time(str):
    temp = str.split(":")
    print(temp)
    
#subtracting for LOS
temp=df_admission['AE_Date'].count()

for i in range(0,temp) :
    d1=df_admission['AS_Date'][i]#+" "+df['AS_time'][i] 
    d2=df_admission['AE_Date'][i]#+" "+df['AE_time'][i]
    d1=datetime.strptime(d1, '%Y-%m-%d') # %H:%M:%S.%f')
    start.append(d1)
    d2=datetime.strptime(d2, '%Y-%m-%d') # %H:%M:%S.%f')
    end.append(d2)
    d=d2-d1
    los.append(d) 

   
# PLOTTING LOS
    
dates = matplotlib.dates.date2num(start)

for i in los:
    days.append(i.days)
    


#obj.diagnosisCorePopuTab()
    
temp = {'Patient_ID':df_admission['Patient_ID'],'Start':start , 'End':end , 'days':los}
temp

timeFrame = pd.DataFrame(temp)
timeFrame

day=[]
month=[]
year=[]

for x in temp["Start"] :
  day.append(x.day)
  month.append(x.month)
  year.append(x.year)

timeFrame.insert(3,"Month", month, True)

timeFrame

class Data :

 l0=[]
 l1=[]
 l2=[]
 l3=[]
 l4=[]
 l5=[]
 l6=[]
 l7=[]

 def startEndData(self):
    
  file = open('/content/sample_data/AdmissionsCorePopulatedTable.txt','r')

  file.readline()

 

  for str in file:
    
     temp_list = file.readline().split()
     self.l0.append(temp_list[0])
     #l1.append(temp_list.split()[1])
     self.l2.append(temp_list[2])
     self.l3.append(temp_list[3])
     self.l4.append(temp_list[4])
     self.l5.append(temp_list[5])
    
  data={'Patient_ID':self.l0,'AS_Date':self.l2,'AS_time':self.l3,'AE_Date':self.l4,'AE_time':self.l5} 

  data = pd.DataFrame(data)
 
  #print(data)

  return(data)
 
 
 def diagnosisCorePopuTab(self) :
  file = open('/content/sample_data/AdmissionsDiagnosesCorePopulatedTable.txt','r')
  file.readline()
 

  for str in file:
    
   try:
    temp_list = file.readline().split()
    self.l0.append(temp_list[0])
    self.l1.append(temp_list[1])
    self.l2.append(temp_list[2])
    self.l3.append(" ".join(temp_list[3:]))
   except:
      print("Error occured",temp_list)
      continue
   print(temp_list)
 
  data={'Patient_ID':self.l0,'AD_ID':self.l1,'Dignoses_code':self.l2,'Description':self.l3} 

  data = pd.DataFrame(data)
   # print(data)
  return(data)

 def patientCorePopuTab(self) :
  file = open('/content/sample_data/PatientCorePopulatedTable.txt','r')
 
  file.readline()
 
  for str in file:
    
    temp_list = file.readline().split()
    
    self.l0.append(temp_list[0])
    self.l1.append(temp_list[1])
    self.l2.append(temp_list[2])
    self.l3.append(temp_list[3])
    self.l4.append(temp_list[4])
    self.l5.append(temp_list[5])
    self.l6.append(temp_list[6])
    self.l7.append(temp_list[7])
 
  data={'Patient_ID':self.l0,'P_gender':self.l1,'PDOB_Date':self.l2,'PDOB_Time':self.l3,'P_Race':self.l4,'P_MartialStatus':self.l5,'P_Lang':self.l6,'Poverty':self.l7} 

  data = pd.DataFrame(data)
  #print(data)
  return(data)

#df = data.join(timeFrame, on='Patient_ID', how='left', lsuffix='_left', rsuffix='_right')
data.dtypes

df = pd.merge(data,timeFrame,on="Patient_ID",how="left")

df['Dignoses_code']=df['Dignoses_code'].apply(lambda x : x[0])

df

new = df[['Dignoses_code','Month']].copy()
new

new.describe()

new.head().plot()

codes=new['Dignoses_code'].unique()

for i in codes:
  q = new[ new['Dignoses_code'] == i ]

  counts = new['Month'].value_counts().to_dict()  
  print(counts)

def month_prec(i):
  q = new[ new['Month'] == i ]

  dic = new['Dignoses_code'].value_counts().to_dict()  
  total = sum(dic.values())
  print(dic)
  for i in dic:
    dic[i]=dic.get(i)/total*100

  print(dic)
  plt.bar(dic.keys(),dic.values(),color='y')

month_prec(1)